#!/usr/bin/env python3
import sys
import argparse
import os
import signal

import gonullu


def kullanim():
    print("""
Kullanim - Usage

Asagidaki satir, docker icindeki /etc/pisi/pisi.conf icinde bulunan
-j parametresini verecegimiz rakam ile degistirir.
The command below replaces the -j parameter in the file in the  docker
image /etc/pisi/pisi.conf with the number given from command line.

sudo gonullu -j 24


Asagidaki satir, docker icin islemcinin %70'ini, fiziksel hafizanin
%25'ini  ayirir.
The command below reserves %70 of cpu and %25 of physical memory for
docker.

sudo gonullu --cpu=70 --memory=25

""")
    sys.exit()


def call_exit(logger, docker_volunteer):
    docker_volunteer.remove()
    logger.get_exit()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='This is pisilinux volunteer application')
    parser.add_argument('-k', '--kullanim', action="store_true", dest="kullanim", default=False)
    parser.add_argument('-ml', '--memory-limit', action='store', dest='memory_limit', default=50, type=int)
    parser.add_argument('-msl', '--memory-swap-limit', action='store', dest='memswap_limit', default=50, type=int)
    parser.add_argument('-cs', '--cpu-set', action='store', dest='cpu_set', default=1, type=int)
    parser.add_argument('-e', '--email', action='store', dest='email', default='ilkermanap@gmail.com', type=str)

    pisi = gonullu
    log = pisi.Log

    if os.getgid() != 0:
        log.error('Lütfen programı yönetici(sudo) olarak çalıştırınız.')
        log.get_exit()

    docker_socket_file = '/var/run/docker.sock'
    if not os.path.exists(docker_socket_file):
        log.error(message='Lütfen ilk önce docker servisini çalıştırınız!')
        log.get_exit()

    args = parser.parse_args()
    print(args)

    if args.kullanim:
        kullanim()

    farm = gonullu.Farm('http://ciftlik.pisilinux.org/ciftlik', args.email)
    volunteer = pisi.Volunteer(args)

    # CTRL+C call_exit'e yönlendirildi. Bu sayede çalışan container silinecek ve öyle çıkış yapılacak.
    signal.signal(signal.SIGINT, call_exit(log, volunteer))
    # CTRL+Z sinyali iptal edildi.
    signal.signal(signal.SIGTSTP, signal.SIG_IGN)

    while 1:
        response = farm.get_package()
        if response is -1:
            farm.wait(message='dir yeni paket bekleniyor.')
        else:
            volunteer.get_package_farm(response)
            while 1:
                if volunteer.check():
                    # container bulunamadı. İşlem bitti.
                    if farm.send_file(response['package']):
                        success = int(open('/tmp/gonullu/%s/%s.bitti' % (response['package'],
                                                                         response['package']), 'r').read())
                        farm.get('updaterunning?id=%s&state=%s' % (response['queue_id'], success), json=False)
                        volunteer.remove()
                        log.success(message='derleme işlemi %s paketi için %s saniyede bitti.' % (response['package'],
                                                                                                  farm.get_total_time())
                                    )
                        farm.set_total_time(0)
                    break
                else:
                    # container bulundu. İşlem sürüyor.
                    farm.wait(message='den beri derleme işlemi %s paketi için devam ediyor.' % response['package'])
